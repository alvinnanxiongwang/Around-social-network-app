
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"


	_test "github.com/gorilla/mux"


	_xtest "github.com/gorilla/mux_test"


)

var tests = []testing.InternalTest{

	{"TestMiddlewareAdd", _test.TestMiddlewareAdd},

	{"TestMiddleware", _test.TestMiddleware},

	{"TestMiddlewareSubrouter", _test.TestMiddlewareSubrouter},

	{"TestMiddlewareExecution", _test.TestMiddlewareExecution},

	{"TestMiddlewareNotFound", _test.TestMiddlewareNotFound},

	{"TestMiddlewareMethodMismatch", _test.TestMiddlewareMethodMismatch},

	{"TestMiddlewareNotFoundSubrouter", _test.TestMiddlewareNotFoundSubrouter},

	{"TestMiddlewareMethodMismatchSubrouter", _test.TestMiddlewareMethodMismatchSubrouter},

	{"TestCORSMethodMiddleware", _test.TestCORSMethodMiddleware},

	{"TestCORSMethodMiddlewareSubrouter", _test.TestCORSMethodMiddlewareSubrouter},

	{"TestMiddlewareOnMultiSubrouter", _test.TestMiddlewareOnMultiSubrouter},

	{"TestSchemeMatchers", _test.TestSchemeMatchers},

	{"TestHost", _test.TestHost},

	{"TestPath", _test.TestPath},

	{"TestPathPrefix", _test.TestPathPrefix},

	{"TestSchemeHostPath", _test.TestSchemeHostPath},

	{"TestHeaders", _test.TestHeaders},

	{"TestMethods", _test.TestMethods},

	{"TestQueries", _test.TestQueries},

	{"TestSchemes", _test.TestSchemes},

	{"TestMatcherFunc", _test.TestMatcherFunc},

	{"TestBuildVarsFunc", _test.TestBuildVarsFunc},

	{"TestSubRouter", _test.TestSubRouter},

	{"TestNamedRoutes", _test.TestNamedRoutes},

	{"TestNameMultipleCalls", _test.TestNameMultipleCalls},

	{"TestStrictSlash", _test.TestStrictSlash},

	{"TestUseEncodedPath", _test.TestUseEncodedPath},

	{"TestWalkSingleDepth", _test.TestWalkSingleDepth},

	{"TestWalkNested", _test.TestWalkNested},

	{"TestWalkSubrouters", _test.TestWalkSubrouters},

	{"TestWalkErrorRoute", _test.TestWalkErrorRoute},

	{"TestWalkErrorMatcher", _test.TestWalkErrorMatcher},

	{"TestWalkErrorHandler", _test.TestWalkErrorHandler},

	{"TestSubrouterErrorHandling", _test.TestSubrouterErrorHandling},

	{"TestPanicOnCapturingGroups", _test.TestPanicOnCapturingGroups},

	{"Test301Redirect", _test.Test301Redirect},

	{"TestSkipClean", _test.TestSkipClean},

	{"TestSubrouterHeader", _test.TestSubrouterHeader},

	{"TestNoMatchMethodErrorHandler", _test.TestNoMatchMethodErrorHandler},

	{"TestErrMatchNotFound", _test.TestErrMatchNotFound},

	{"TestMethodsSubrouterCatchall", _test.TestMethodsSubrouterCatchall},

	{"TestMethodsSubrouterStrictSlash", _test.TestMethodsSubrouterStrictSlash},

	{"TestMethodsSubrouterPathPrefix", _test.TestMethodsSubrouterPathPrefix},

	{"TestMethodsSubrouterSubrouter", _test.TestMethodsSubrouterSubrouter},

	{"TestMethodsSubrouterPathVariable", _test.TestMethodsSubrouterPathVariable},

	{"TestSubrouterMatching", _test.TestSubrouterMatching},

	{"Test_copyRouteConf", _test.Test_copyRouteConf},

	{"TestMethodNotAllowed", _test.TestMethodNotAllowed},

	{"TestSubrouterCustomMethodNotAllowed", _test.TestSubrouterCustomMethodNotAllowed},

	{"TestSubrouterNotFound", _test.TestSubrouterNotFound},

	{"TestContextMiddleware", _test.TestContextMiddleware},

	{"TestRouteMatchers", _test.TestRouteMatchers},

	{"TestHeaderMatcher", _test.TestHeaderMatcher},

	{"TestHostMatcher", _test.TestHostMatcher},

	{"TestMethodMatcher", _test.TestMethodMatcher},

	{"TestPathMatcher", _test.TestPathMatcher},

	{"TestSchemeMatcher", _test.TestSchemeMatcher},

	{"TestUrlBuilding", _test.TestUrlBuilding},

	{"TestMatchedRouteName", _test.TestMatchedRouteName},

	{"TestSubRouting", _test.TestSubRouting},

	{"TestVariableNames", _test.TestVariableNames},

	{"TestRedirectSlash", _test.TestRedirectSlash},

	{"TestNewRegexp", _test.TestNewRegexp},

	{"Test_findFirstQueryKey", _test.Test_findFirstQueryKey},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkMux", _test.BenchmarkMux},

	{"BenchmarkMuxAlternativeInRegexp", _test.BenchmarkMuxAlternativeInRegexp},

	{"BenchmarkManyPathVariables", _test.BenchmarkManyPathVariables},

	{"Benchmark_findQueryKey", _test.Benchmark_findQueryKey},

	{"Benchmark_findQueryKeyGoLib", _test.Benchmark_findQueryKeyGoLib},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

	{"ExampleSetURLVars", _test.ExampleSetURLVars, "bar\n", false},

	{"ExampleCORSMethodMiddleware", _xtest.ExampleCORSMethodMiddleware, "GET,PUT,PATCH,OPTIONS\nhttp://example.com\n", false},

	{"ExampleRoute_HeadersRegexp", _xtest.ExampleRoute_HeadersRegexp, "Match: true [\"text/plain\" \"text/html\"]\nMatch: true [\"application/xhtml+xml\"]\n", false},

	{"ExampleRoute_HeadersRegexp_exactMatch", _xtest.ExampleRoute_HeadersRegexp_exactMatch, "Match: true [\"https://example.co\"]\nMatch: false [\"https://example.co.uk\"]\n", false},

}

func init() {
	testdeps.ImportPath = "github.com/gorilla/mux"
}



func main() {

	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

